syntax = "proto3";
package juno.feeshare.v1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "juno/feeshare/v1/genesis.proto";
import "juno/feeshare/v1/feeshare.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/CosmosContracts/juno/x/feeshare/types";

// Query defines the gRPC querier service.
service Query {
  // FeeShares retrieves all registered FeeShares
  rpc FeeShares(QueryFeeSharesRequest) returns (QueryFeeSharesResponse) {
    option (google.api.http).get = "/juno/feeshare/v1/fee_shares";
  }

  // FeeShare retrieves a registered FeeShare for a given contract address
  rpc FeeShare(QueryFeeShareRequest) returns (QueryFeeShareResponse) {
    option (google.api.http).get =
        "/juno/feeshare/v1/fee_shares/{contract_address}";
  }

  // Params retrieves the FeeShare module params
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/juno/feeshare/v1/params";
  }

  // DeployerFeeShares retrieves all FeeShares that a given deployer has
  // registered
  rpc DeployerFeeShares(QueryDeployerFeeSharesRequest)
      returns (QueryDeployerFeeSharesResponse) {
    option (google.api.http).get =
        "/juno/feeshare/v1/fee_shares/{deployer_address}";
  }

  // WithdrawerFeeShares retrieves all FeeShares with a given withdrawer
  // address
  rpc WithdrawerFeeShares(QueryWithdrawerFeeSharesRequest)
      returns (QueryWithdrawerFeeSharesResponse) {
    option (google.api.http).get =
        "/juno/feeshare/v1/fee_shares/{withdrawer_address}";
  }
}

// QueryFeeSharesRequest is the request type for the Query/FeeShares RPC method.
message QueryFeeSharesRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QueryFeeSharesResponse is the response type for the Query/FeeShares RPC
// method.
message QueryFeeSharesResponse {
  // FeeShare is a slice of all stored Reveneue
  repeated FeeShare feeshare = 1 [ (gogoproto.nullable) = false ];
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryFeeShareRequest is the request type for the Query/FeeShare RPC method.
message QueryFeeShareRequest {
  // contract_address of a registered contract in bech32 format
  string contract_address = 1;
}

// QueryFeeShareResponse is the response type for the Query/FeeShare RPC method.
message QueryFeeShareResponse {
  // FeeShare is a stored Reveneue for the queried contract
  FeeShare feeshare = 1 [ (gogoproto.nullable) = false ];
}

// QueryParamsRequest is the request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is the response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params is the returned FeeShare parameter
  Params params = 1 [ (gogoproto.nullable) = false ];
}

// QueryDeployerFeeSharesRequest is the request type for the
// Query/DeployerFeeShares RPC method.
message QueryDeployerFeeSharesRequest {
  // deployer_address in bech32 format
  string deployer_address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryDeployerFeeSharesResponse is the response type for the
// Query/DeployerFeeShares RPC method.
message QueryDeployerFeeSharesResponse {
  // contract_addresses is the slice of registered contract addresses for a
  // deployer
  repeated string contract_addresses = 1;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryWithdrawerFeeSharesRequest is the request type for the
// Query/WithdrawerFeeShares RPC method.
message QueryWithdrawerFeeSharesRequest {
  // withdrawer_address in bech32 format
  string withdrawer_address = 1;
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

// QueryWithdrawerFeeSharesResponse is the response type for the
// Query/WithdrawerFeeShares RPC method.
message QueryWithdrawerFeeSharesResponse {
  // contract_addresses is the slice of registered contract addresses for a
  // withdrawer
  repeated string contract_addresses = 1;
  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}
